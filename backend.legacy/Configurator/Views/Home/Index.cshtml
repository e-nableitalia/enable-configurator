@{
    ViewData["Title"] = "Home Page";
}

<div class="maincontainer">
<div class="text-left leftgrid">
    <span class="display-6"> Configure Your Own Device </span>
    

	<div class = "configurator">
			<button class="startButton" id="appInitiator"> Start </button>
		<div class="confTable leftval fifteen" >
			

			<div class="d-xxl-table">
					<span class="display-7"> Cone Length </span>
				
			</div>

			<div class="d-xxl-table">
				<span class="display-7"> Handle Radius

				</span>
				
			</div>
				<button class="setButton startButton" id="confirmButton"> Set Configurations </button>
				

		</div>
		<div class="confTable rightval">				
				<div class="d-xxl-table">
					<span class="display-7"><input type="range" id="val_one" value="115" min=110 max="140"  /><span id="val_one_val"> 115 </span> mm </span>
				</div>

				<div class="d-xxl-table">
					<span class="display-7"><input type="range" id="val_two" value="30" min=30 max=35 /> <span id="val_two_val"> 30 </span>   mm </span>				
				</div>



				<button class="setButton startButton" id="colorPicker"> Color <break></break>Preview </button>
		</div>
	</div>
		<div id="downloadButtonDIV" style="width: 100%;height: fit-content" ;>
		</div>
		<div id="loadingBar" style="width: 100%;height: fit-content" ;>
		</div>
</div>

<div id="tdcontainer" class="text-left rightgrid">
		<script>
	
			window.STLfile = "./stlfiles/defaultBikeAdapter.stl";
			window.Reload  = false;
			

			

		</script>
		<script type="importmap">
			{
				"imports": {
					"three": "./js/build/three.module.js",
					"three/addons/": "./js/jsm/"
					
				}
			}
		</script>

		<script type="module">

			import * as THREE from 'three';
			
			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
			import { RGBELoader } from 'three/addons/loaders/RGBELoader.js';
			import { STLLoader } from 'three/addons/loaders/STLLoader.js';
			let scene;
			let renderer;
			renderer = new THREE.WebGLRenderer({ antialias: true });
			window.camera = new THREE.PerspectiveCamera(45, document.getElementById('tdcontainer').offsetWidth / document.getElementById('tdcontainer').offsetHeight, 0.25, 20);
			var newMaterial = new THREE.MeshStandardMaterial({ color:  0x0ad2ff, metalness: .4, roughness: 0.3 });
			const material = new THREE.MeshPhysicalMaterial({
				metalness: .9, roughness: 0.6, color: 0x0ad2ff
			})
			const loader = new STLLoader();
			const controls = new OrbitControls(camera, renderer.domElement);
			const container = document.getElementById('tdcontainer');
			var w = container.offsetWidth;
			var h = container.offsetHeight;


			
			scene = new THREE.Scene();
			window.scenecopy = scene;
			init();
			render();

			///create timer function to update the scene with new file 			
			setInterval(function()
			{ 
				if ( Reload == true ) 
				{
					init();
					Reload = false;
					console.log( "Reloaded" + STLfile);
				}
				if (ReColor = true) {
					render();
					ReColor = false;
				}
 			}, 1000);

			

			function init() {

				scene.remove.apply(scene, scene.children);
				camera.position.set(-1.1944548767273138, 1.6152192024667498,  1.5688304289412986);
				camera.updateProjectionMatrix();
				
				
				loader.load(STLfile, function (gltf) {
					//gltf.scene.scale.set(15,15,15)
				
					


					window.mesh = new THREE.Mesh(gltf, material);
					mesh.scale.set(.01, .01,.01);
					scene.add(mesh)
					window.Adapter = scene.add(gltf.scene);

					
					/*gltf.scene.traverse((o) => {
						if (o.isMesh) o.material = newMaterial;
					});
					*/
					//render();
					onWindowResize();
				});
				
				window.hemiLight = new THREE.HemisphereLight(0x7B7B7B, 0x7B7B7B, 1);
				hemiLight.position.set(0, 900, 0);
				hemiLight.name = "HemisphereLight";
				scene.add(hemiLight);

				window.dirLight = new THREE.DirectionalLight( 0x7B7B7B,1 );
				dirLight.position.set( 20, 400, -500 );				
				dirLight.castShadow = true;
				scene.add(dirLight)
				window.dirLightBottom = new THREE.DirectionalLight(0x7B7B7B,);
				dirLightBottom.position.set(20, 400, -500);
				dirLightBottom.castShadow = true;
				dirLightBottom.position.set(20, -400, 500)
				scene.add(dirLightBottom)


				
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setClearColor(0xffffff, 0);
				renderer.setSize(document.getElementById('tdcontainer').offsetWidth, document.getElementById('tdcontainer').offsetHeight ,false);
				renderer.toneMapping = THREE.ACESFilmicToneMapping;
				renderer.toneMappingExposure = 1;
				renderer.outputEncoding = THREE.sRGBEncoding;
				container.appendChild( renderer.domElement );

				
				controls.addEventListener( 'change', render ); // use if there is no animation loop
				controls.minDistance = 2;
				controls.maxDistance = 10;
				controls.target.set( 0, 0, - 0.2 );
				controls.update();

				window.addEventListener( 'resize', onWindowResize );

			}

			function onWindowResize() {

				camera.aspect = document.getElementById('tdcontainer').offsetWidth / document.getElementById('tdcontainer').offsetHeight;
				camera.updateProjectionMatrix();

				renderer.setSize(document.getElementById('tdcontainer').offsetWidth , document.getElementById('tdcontainer').offsetHeight);
				Adapter.scale.set(.8,.8,.8)
				render();

			}

			//

			function render() {

				renderer.render( scene, camera );

			}

		</script>

    
</div>

</div>
